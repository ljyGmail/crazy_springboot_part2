/*
 * This file is generated by jOOQ.
 */
package org.crazyit.generated.tables;


import java.util.function.Function;

import org.crazyit.generated.CrazySpringboot;
import org.crazyit.generated.Keys;
import org.crazyit.generated.tables.records.UserInfRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserInf extends TableImpl<UserInfRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>crazy_springboot.user_inf</code>
     */
    public static final UserInf USER_INF = new UserInf();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserInfRecord> getRecordType() {
        return UserInfRecord.class;
    }

    /**
     * The column <code>crazy_springboot.user_inf.user_id</code>.
     */
    public final TableField<UserInfRecord, Integer> USER_ID = createField(DSL.name("user_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>crazy_springboot.user_inf.name</code>.
     */
    public final TableField<UserInfRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>crazy_springboot.user_inf.password</code>.
     */
    public final TableField<UserInfRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>crazy_springboot.user_inf.age</code>.
     */
    public final TableField<UserInfRecord, Integer> AGE = createField(DSL.name("age"), SQLDataType.INTEGER, this, "");

    private UserInf(Name alias, Table<UserInfRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserInf(Name alias, Table<UserInfRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>crazy_springboot.user_inf</code> table reference
     */
    public UserInf(String alias) {
        this(DSL.name(alias), USER_INF);
    }

    /**
     * Create an aliased <code>crazy_springboot.user_inf</code> table reference
     */
    public UserInf(Name alias) {
        this(alias, USER_INF);
    }

    /**
     * Create a <code>crazy_springboot.user_inf</code> table reference
     */
    public UserInf() {
        this(DSL.name("user_inf"), null);
    }

    public <O extends Record> UserInf(Table<O> child, ForeignKey<O, UserInfRecord> key) {
        super(child, key, USER_INF);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : CrazySpringboot.CRAZY_SPRINGBOOT;
    }

    @Override
    public Identity<UserInfRecord, Integer> getIdentity() {
        return (Identity<UserInfRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserInfRecord> getPrimaryKey() {
        return Keys.KEY_USER_INF_PRIMARY;
    }

    @Override
    public UserInf as(String alias) {
        return new UserInf(DSL.name(alias), this);
    }

    @Override
    public UserInf as(Name alias) {
        return new UserInf(alias, this);
    }

    @Override
    public UserInf as(Table<?> alias) {
        return new UserInf(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserInf rename(String name) {
        return new UserInf(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserInf rename(Name name) {
        return new UserInf(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserInf rename(Table<?> name) {
        return new UserInf(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
