/*
 * This file is generated by jOOQ.
 */
package org.crazyit.generated.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import org.crazyit.generated.CrazySpringboot;
import org.crazyit.generated.Indexes;
import org.crazyit.generated.Keys;
import org.crazyit.generated.tables.records.StudentInfRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function6;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentInf extends TableImpl<StudentInfRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>crazy_springboot.student_inf</code>
     */
    public static final StudentInf STUDENT_INF = new StudentInf();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentInfRecord> getRecordType() {
        return StudentInfRecord.class;
    }

    /**
     * The column <code>crazy_springboot.student_inf.student_id</code>.
     */
    public final TableField<StudentInfRecord, Integer> STUDENT_ID = createField(DSL.name("student_id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>crazy_springboot.student_inf.name</code>.
     */
    public final TableField<StudentInfRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>crazy_springboot.student_inf.age</code>.
     */
    public final TableField<StudentInfRecord, Integer> AGE = createField(DSL.name("age"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>crazy_springboot.student_inf.address</code>.
     */
    public final TableField<StudentInfRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>crazy_springboot.student_inf.gender</code>.
     */
    public final TableField<StudentInfRecord, String> GENDER = createField(DSL.name("gender"), SQLDataType.CHAR(2), this, "");

    /**
     * The column <code>crazy_springboot.student_inf.clazz_code</code>.
     */
    public final TableField<StudentInfRecord, Integer> CLAZZ_CODE = createField(DSL.name("clazz_code"), SQLDataType.INTEGER, this, "");

    private StudentInf(Name alias, Table<StudentInfRecord> aliased) {
        this(alias, aliased, null);
    }

    private StudentInf(Name alias, Table<StudentInfRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>crazy_springboot.student_inf</code> table
     * reference
     */
    public StudentInf(String alias) {
        this(DSL.name(alias), STUDENT_INF);
    }

    /**
     * Create an aliased <code>crazy_springboot.student_inf</code> table
     * reference
     */
    public StudentInf(Name alias) {
        this(alias, STUDENT_INF);
    }

    /**
     * Create a <code>crazy_springboot.student_inf</code> table reference
     */
    public StudentInf() {
        this(DSL.name("student_inf"), null);
    }

    public <O extends Record> StudentInf(Table<O> child, ForeignKey<O, StudentInfRecord> key) {
        super(child, key, STUDENT_INF);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : CrazySpringboot.CRAZY_SPRINGBOOT;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.asList(Indexes.STUDENT_INF_CLAZZ_CODE);
    }

    @Override
    public Identity<StudentInfRecord, Integer> getIdentity() {
        return (Identity<StudentInfRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<StudentInfRecord> getPrimaryKey() {
        return Keys.KEY_STUDENT_INF_PRIMARY;
    }

    @Override
    public List<ForeignKey<StudentInfRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STUDENT_INF_IBFK_1);
    }

    private transient ClazzInf _clazzInf;

    /**
     * Get the implicit join path to the <code>crazy_springboot.clazz_inf</code>
     * table.
     */
    public ClazzInf clazzInf() {
        if (_clazzInf == null)
            _clazzInf = new ClazzInf(this, Keys.STUDENT_INF_IBFK_1);

        return _clazzInf;
    }

    @Override
    public StudentInf as(String alias) {
        return new StudentInf(DSL.name(alias), this);
    }

    @Override
    public StudentInf as(Name alias) {
        return new StudentInf(alias, this);
    }

    @Override
    public StudentInf as(Table<?> alias) {
        return new StudentInf(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentInf rename(String name) {
        return new StudentInf(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentInf rename(Name name) {
        return new StudentInf(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public StudentInf rename(Table<?> name) {
        return new StudentInf(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, Integer, String, String, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function6<? super Integer, ? super String, ? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function6<? super Integer, ? super String, ? super Integer, ? super String, ? super String, ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
