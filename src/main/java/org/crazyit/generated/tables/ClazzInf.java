/*
 * This file is generated by jOOQ.
 */
package org.crazyit.generated.tables;


import java.util.function.Function;

import org.crazyit.generated.CrazySpringboot;
import org.crazyit.generated.Keys;
import org.crazyit.generated.tables.records.ClazzInfRecord;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function2;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ClazzInf extends TableImpl<ClazzInfRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>crazy_springboot.clazz_inf</code>
     */
    public static final ClazzInf CLAZZ_INF = new ClazzInf();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ClazzInfRecord> getRecordType() {
        return ClazzInfRecord.class;
    }

    /**
     * The column <code>crazy_springboot.clazz_inf.clazz_code</code>.
     */
    public final TableField<ClazzInfRecord, Integer> CLAZZ_CODE = createField(DSL.name("clazz_code"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>crazy_springboot.clazz_inf.name</code>.
     */
    public final TableField<ClazzInfRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(255), this, "");

    private ClazzInf(Name alias, Table<ClazzInfRecord> aliased) {
        this(alias, aliased, null);
    }

    private ClazzInf(Name alias, Table<ClazzInfRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>crazy_springboot.clazz_inf</code> table reference
     */
    public ClazzInf(String alias) {
        this(DSL.name(alias), CLAZZ_INF);
    }

    /**
     * Create an aliased <code>crazy_springboot.clazz_inf</code> table reference
     */
    public ClazzInf(Name alias) {
        this(alias, CLAZZ_INF);
    }

    /**
     * Create a <code>crazy_springboot.clazz_inf</code> table reference
     */
    public ClazzInf() {
        this(DSL.name("clazz_inf"), null);
    }

    public <O extends Record> ClazzInf(Table<O> child, ForeignKey<O, ClazzInfRecord> key) {
        super(child, key, CLAZZ_INF);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : CrazySpringboot.CRAZY_SPRINGBOOT;
    }

    @Override
    public Identity<ClazzInfRecord, Integer> getIdentity() {
        return (Identity<ClazzInfRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<ClazzInfRecord> getPrimaryKey() {
        return Keys.KEY_CLAZZ_INF_PRIMARY;
    }

    @Override
    public ClazzInf as(String alias) {
        return new ClazzInf(DSL.name(alias), this);
    }

    @Override
    public ClazzInf as(Name alias) {
        return new ClazzInf(alias, this);
    }

    @Override
    public ClazzInf as(Table<?> alias) {
        return new ClazzInf(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public ClazzInf rename(String name) {
        return new ClazzInf(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClazzInf rename(Name name) {
        return new ClazzInf(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public ClazzInf rename(Table<?> name) {
        return new ClazzInf(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function2<? super Integer, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
