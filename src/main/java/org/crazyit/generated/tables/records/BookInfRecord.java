/*
 * This file is generated by jOOQ.
 */
package org.crazyit.generated.tables.records;


import org.crazyit.generated.tables.BookInf;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class BookInfRecord extends UpdatableRecordImpl<BookInfRecord> implements Record4<Integer, String, Double, String> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>crazy_springboot.book_inf.book_id</code>.
     */
    public void setBookId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>crazy_springboot.book_inf.book_id</code>.
     */
    public Integer getBookId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>crazy_springboot.book_inf.author</code>.
     */
    public void setAuthor(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>crazy_springboot.book_inf.author</code>.
     */
    public String getAuthor() {
        return (String) get(1);
    }

    /**
     * Setter for <code>crazy_springboot.book_inf.price</code>.
     */
    public void setPrice(Double value) {
        set(2, value);
    }

    /**
     * Getter for <code>crazy_springboot.book_inf.price</code>.
     */
    public Double getPrice() {
        return (Double) get(2);
    }

    /**
     * Setter for <code>crazy_springboot.book_inf.title</code>.
     */
    public void setTitle(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>crazy_springboot.book_inf.title</code>.
     */
    public String getTitle() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Double, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, Double, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return BookInf.BOOK_INF.BOOK_ID;
    }

    @Override
    public Field<String> field2() {
        return BookInf.BOOK_INF.AUTHOR;
    }

    @Override
    public Field<Double> field3() {
        return BookInf.BOOK_INF.PRICE;
    }

    @Override
    public Field<String> field4() {
        return BookInf.BOOK_INF.TITLE;
    }

    @Override
    public Integer component1() {
        return getBookId();
    }

    @Override
    public String component2() {
        return getAuthor();
    }

    @Override
    public Double component3() {
        return getPrice();
    }

    @Override
    public String component4() {
        return getTitle();
    }

    @Override
    public Integer value1() {
        return getBookId();
    }

    @Override
    public String value2() {
        return getAuthor();
    }

    @Override
    public Double value3() {
        return getPrice();
    }

    @Override
    public String value4() {
        return getTitle();
    }

    @Override
    public BookInfRecord value1(Integer value) {
        setBookId(value);
        return this;
    }

    @Override
    public BookInfRecord value2(String value) {
        setAuthor(value);
        return this;
    }

    @Override
    public BookInfRecord value3(Double value) {
        setPrice(value);
        return this;
    }

    @Override
    public BookInfRecord value4(String value) {
        setTitle(value);
        return this;
    }

    @Override
    public BookInfRecord values(Integer value1, String value2, Double value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached BookInfRecord
     */
    public BookInfRecord() {
        super(BookInf.BOOK_INF);
    }

    /**
     * Create a detached, initialised BookInfRecord
     */
    public BookInfRecord(Integer bookId, String author, Double price, String title) {
        super(BookInf.BOOK_INF);

        setBookId(bookId);
        setAuthor(author);
        setPrice(price);
        setTitle(title);
        resetChangedOnNotNull();
    }
}
